use algebra::{
    fields::tweedle::Fq as TweedleFq,
    biginteger::BigInteger256,
    field_new,
};
use crate::{
    crh::TweedleFqPoseidonHash,
    merkle_tree::field_based_mht::FieldBasedMerkleTreePrecomputedEmptyConstants
};

pub const TWEEDLE_MHT_POSEIDON_PARAMETERS: FieldBasedMerkleTreePrecomputedEmptyConstants<'static, TweedleFqPoseidonHash> =
    FieldBasedMerkleTreePrecomputedEmptyConstants {
        nodes: &[
            field_new!(TweedleFq, BigInteger256([0, 0, 0, 0])),
            field_new!(TweedleFq, BigInteger256([571543258846690045, 9668423315943487211, 15207571892648283347, 3663924216008466650])),
            field_new!(TweedleFq, BigInteger256([10778557592461781281, 11984799518140201179, 2571166438057034436, 629803531019169725])),
            field_new!(TweedleFq, BigInteger256([6871636724756646462, 3484289217997285770, 3000874065703614192, 2796436783780722855])),
            field_new!(TweedleFq, BigInteger256([11838309199946986802, 10155190646586623382, 336855880205130279, 158629538639247276])),
            field_new!(TweedleFq, BigInteger256([14943339878831194207, 13192097247327085693, 5085182607549724242, 2255744529189892787])),
            field_new!(TweedleFq, BigInteger256([7124593205276977911, 8126059895816433281, 14260036020018279865, 580380414137426687])),
            field_new!(TweedleFq, BigInteger256([16309038711545651388, 9700414788382122041, 17593203076567032839, 253339774425262520])),
            field_new!(TweedleFq, BigInteger256([8026198812057767294, 12166615334933888636, 17293997816524785879, 1204660232066268032])),
            field_new!(TweedleFq, BigInteger256([13840429540424223271, 7681698952893986773, 9093328272281851588, 4317631845197999317])),
            field_new!(TweedleFq, BigInteger256([17170819557109769928, 13077165284746759684, 9718823032838762762, 778309504895909109])),
            field_new!(TweedleFq, BigInteger256([7302228933726229670, 14583436203428232677, 9256280630789845642, 1873124199492643836])),
            field_new!(TweedleFq, BigInteger256([15632610128094042405, 9106879591513009003, 9867905173030384440, 3679103318047557138])),
            field_new!(TweedleFq, BigInteger256([7388243960322030670, 192384297547752948, 3649460664909835242, 2377682990568558769])),
            field_new!(TweedleFq, BigInteger256([8222037919444997324, 7552392084958492131, 10196076608464915493, 972931266042573743])),
            field_new!(TweedleFq, BigInteger256([15179813854997755876, 4576615728861278660, 4432978691367244153, 377249182599729143])),
            field_new!(TweedleFq, BigInteger256([8415453835421799802, 159670292208859624, 10093279529070276428, 683577367638365250])),
            field_new!(TweedleFq, BigInteger256([1705514417400041153, 8104715774837867555, 1604666249687595008, 1718540246517011352])),
            field_new!(TweedleFq, BigInteger256([3106586344929884088, 12604014976963021940, 14941654086871049416, 1796249794521945983])),
            field_new!(TweedleFq, BigInteger256([12306187078288342226, 18075230345054452704, 2250232372322656700, 1393668042369361428])),
            field_new!(TweedleFq, BigInteger256([9901014253566146408, 6309992963587958344, 18327337189316048182, 3551981072898796842])),
            field_new!(TweedleFq, BigInteger256([8424632191310658728, 13604397007409059277, 70297432654782297, 1824998006916282])),
            field_new!(TweedleFq, BigInteger256([9389159271072994794, 383058273291972027, 3094348671782137718, 2802101639537513285])),
            field_new!(TweedleFq, BigInteger256([6504340763230613420, 7000444624509376541, 772870430002558621, 3136684393202156441])),
            field_new!(TweedleFq, BigInteger256([3077878160248966332, 7651061762786739276, 435622970363907226, 871362818751305609])),
            field_new!(TweedleFq, BigInteger256([6764346170664065078, 5701295996014916338, 9907541422780291194, 406025697723730783])),
            field_new!(TweedleFq, BigInteger256([15337870352556216650, 17240637251346786929, 16657671777892818449, 4248533460348833687])),
            field_new!(TweedleFq, BigInteger256([15141414463247834924, 3947877385284521085, 10325289222213006259, 133474861880832361])),
            field_new!(TweedleFq, BigInteger256([7774265652202884015, 14196928893921398148, 3994864145852144822, 3788408521048825298])),
            field_new!(TweedleFq, BigInteger256([13460979225624197582, 2854962726347594994, 2507205771340844751, 782717480761294878])),
            field_new!(TweedleFq, BigInteger256([9218764651569921222, 14783048489367764321, 1860118199089236812, 3275820416787028656])),
            field_new!(TweedleFq, BigInteger256([6894305244269020474, 7481595221889851342, 7545346601923237583, 2139408109164766047])),
            field_new!(TweedleFq, BigInteger256([13736147359952143660, 17838473895319673341, 12647349159691564885, 95960444169122746])),
            field_new!(TweedleFq, BigInteger256([12541085295221823975, 13896768330440314379, 9679776598296919375, 4371357490743947697])),
            field_new!(TweedleFq, BigInteger256([3351841092989306828, 8818505759265875365, 17507019339920634550, 1027927906586394565])),
            field_new!(TweedleFq, BigInteger256([263081558962384528, 11155991400747393067, 12047319978152389222, 3161227911408142498])),
            field_new!(TweedleFq, BigInteger256([3033078567847722316, 5036883075489769711, 16030446542911205686, 1255515577017969382])),
            field_new!(TweedleFq, BigInteger256([707421069506632178, 6441456127568615151, 13518932038066042860, 2775176351271429968])),
            field_new!(TweedleFq, BigInteger256([2114812755799901667, 14805651240254429060, 9942828430926628780, 1604022438159857064])),
            field_new!(TweedleFq, BigInteger256([3416724247890429757, 3892440074538534684, 17646806795228152946, 2408891754829793116]))

        ],
        merkle_arity: 2,
        max_height: 40,
    };

#[cfg(test)]
mod test {

    use algebra::Field;
    use crate::FieldBasedHash;

    use super::*;

    #[test]
    fn generate_binary_tweedle_fq_mht_nodes() {
        let mut empty_node = TWEEDLE_MHT_POSEIDON_PARAMETERS.nodes[0].clone();
        let mut digest = TweedleFqPoseidonHash::init(None);
        assert_eq!(empty_node, TweedleFq::zero());
        for node in TWEEDLE_MHT_POSEIDON_PARAMETERS.nodes {
            assert_eq!(node, &empty_node);
            empty_node = digest.update(empty_node).update(empty_node).finalize();
            digest.reset(None);
        }
    }
}